# Licenciado a la Apache Software Foundation (ASF) bajo uno
# o más acuerdos de licencia del contribuyente. Consulte el archivo NOTICE
# distribuido con este trabajo para obtener información adicional
# sobre la propiedad de los derechos de autor. ASF licencia este archivo
# a usted bajo la Licencia Apache, Versión 2.0 (la
# "Licencia"); no puede utilizar este archivo excepto en cumplimiento
# con la Licencia. Puede obtener una copia de la Licencia en
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# A menos que lo requiera la ley aplicable o se acuerde por escrito,
# el software distribuido bajo la Licencia se distribuye en un
# "COMO ESTÁ" BASIS, SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO,
# ya sea expresa o implícita. Consulte la Licencia para obtener los detalles
# específicos sobre los permisos y limitaciones bajo la Licencia.

# Configuración básica del clúster de Airflow para CeleryExecutor con Redis y PostgreSQL.
#
# ADVERTENCIA: Esta configuración es para desarrollo local. No la utilice en un despliegue de producción.
#
# Esta configuración admite la configuración básica mediante variables de entorno o un archivo .env
# Las siguientes variables son compatibles:
#
# AIRFLOW_IMAGE_NAME           - Nombre de la imagen de Docker utilizada para ejecutar Airflow.
#                                Por defecto: apache/airflow:2.3.3
# AIRFLOW_UID                  - ID de usuario en los contenedores de Airflow
#                                Por defecto: 50000
# Estas configuraciones son útiles principalmente en caso de prueba/uso de Airflow en modo de prueba.

---
version: '3'
x-airflow-common:
  &airflow-common
  image: my_airflow
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL: 10
    PYTHONPATH: /opt/airflow/scripts:$PYTHONPATH
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./scripts:/opt/airflow/scripts
    - ./config:/opt/airflow/config
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  depends_on:
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always

  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}

volumes:
  postgres-db-volume:
